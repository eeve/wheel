{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///index.js","webpack:///webpack/bootstrap f221155b7789cb4a7544","webpack:///./index.js","webpack:///./src/core.js","webpack:///./src/index.js","webpack:///./src/utils/object.js","webpack:///./src/utils/array.js","webpack:///./src/utils/format.js","webpack:///./src/utils/storage.js","webpack:///./src/utils/string.js","webpack:///./src ^\\.\\/.*$"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","wheel","_","fn","prototype","mixin","destination","source","property","exts","i","length","path","ext","isEmpty","obj","Boolean","$","trim","isUndefined","o","isNull","isNumber","constructor","Number","isBoolean","isString","String","isObject","Object","toString","isArray","Array","isArguments","callee","isFunction","Function","$typeof","getUrlParam","name","reg","RegExp","r","decodingURI","window","location","search","substr","match","random","min","max","Math","floor","clone","Clazz","tempClass","now","Date","_obj","indexOf","args","slice","arguments","apply","arr","fromIndex","lastIndexOf","forEach","fun","len","TypeError","thisp","filter","res","val","push","some","map","every","reduce","rv","reduceRight","toArray","type","remove","members","j","flag","splice","replace","oldValue","newValue","bubbleSort","compareFunc","num1","num2","temp","exchange","n","time","binarySearch","item","start","end","current","contains","uniquelize","result","intersect","a","b","minus","union","concat","array","date","formatString","M+","getMonth","D+","getDate","h+","getHours","m+","getMinutes","s+","getSeconds","q+","S","getMilliseconds","test","$1","getFullYear","k","number","num","pattern","strarr","split","fmtarr","retstr","str","fmt","comma","f","l","format","domainPrefix","host","cookie","set","value","domain","hour","today","expire","setTime","getTime","document","toGMTString","get","localStorage","setItem","isSupports","getItem","removeItem","clear","isURL","RE","parseURL","ret","exec","spec","SPEC","curSpec","mapQuery","uri","key","index","pieces","substring","params","unescape","Error","e","string1","string2","separator","string","clean","camelCase","charAt","toUpperCase","hyphenate","toLowerCase","capitalize","toInt","base","parseInt","toFloat","parseFloat","hexToRgb","hex","_convert","rgbToHex","toQueryPair","encodeURIComponent","toQueryString","join","replaceAll","reallyDo","replaceWith","ignoreCase","isPrototypeOf","isEmail","webpackContext","req","webpackContextResolve","./core","./core.js","./index","./index.js","./utils/array","./utils/array.js","./utils/format","./utils/format.js","./utils/object","./utils/object.js","./utils/storage","./utils/storage.js","./utils/string","./utils/string.js","keys","resolve"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"$w\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"$w\"] = factory();\n\telse\n\t\troot[\"$w\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","/*! a collection of utils for web development */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"$w\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"$w\"] = factory();\n\telse\n\t\troot[\"$w\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar wheel = __webpack_require__(2);\n\tmodule.exports = new wheel();\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Wheel对象\n\t *\n\t * @return {[type]} [description]\n\t */\n\tvar _ = function() {};\n\t\n\t_.fn = _.prototype;\n\t\n\t_.fn.mixin = _.mixin = function(destination, source) {\n\t  for (var property in source)\n\t    destination[property] = source[property];\n\t  return destination;\n\t};\n\t\n\tmodule.exports = _;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar _ = __webpack_require__(1);\n\t\n\tvar exts = ['./utils/object','./utils/string','./utils/array','./utils/format','./utils/storage'];\n\tfor (var i = exts.length - 1; i >= 0; i--) {\n\t  var path = exts[i];\n\t  var ext = __webpack_require__(8)(path);\n\t  _.mixin(_.fn,ext);\n\t};\n\t\n\tmodule.exports = _;\n\t\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tvar _ = {};\n\t\n\t/**\n\t * 判断当前obj是否为空\n\t *\n\t * @method isEmpty\n\t * @param {Object} obj 需要验证的对象\n\t * @return {Boolean} obj是否为空,返回true则为空，返回false则不为空\n\t */\n\t_.isEmpty = function(obj) {\n\t  return (!(Boolean($.trim(obj) || obj === 0)) || obj == \"null\" || obj == \"undefined\");\n\t};\n\t\n\t/**\n\t * 判断变量的值是否是 undefined\n\t * Determines whether or not the provided object is undefined\n\t *\n\t * @method isUndefined\n\t * @memberOf Jx.prototype\n\t *\n\t * @param {Mixed} o 传入被检测变量的名称\n\t * @return {Boolean} 当 o 的值是 undefined 时返回 true\n\t */\n\t_.isUndefined = function(o) {\n\t  return typeof(o) === \"undefined\";\n\t};\n\t\n\t/**\n\t * 判断变量的值是否是 null\n\t * Determines whether or not the provided object is null\n\t *\n\t * @method isNull\n\t * @memberOf Jx.prototype\n\t *\n\t * @param {Mixed} o 传入被检测变量的名称\n\t * @return {Boolean} 当 o 的值是 null 时返回 true\n\t */\n\t_.isNull = function(o) {\n\t  return o === null;\n\t};\n\t\n\t/**\n\t * 判断变量的类型是否是 Number\n\t * Determines whether or not the provided object is a number\n\t *\n\t * @memberOf Jx.prototype\n\t * @name isNumber\n\t * @function\n\t * @param {Mixed} o 传入被检测变量的名称\n\t * @return {Boolean} 当 o 的类型是 number 时返回 true\n\t */\n\t_.isNumber = function(o) {\n\t  return (o === 0 || o) && o.constructor === Number;\n\t};\n\t\n\t/**\n\t * 判断变量的类型是否是 Boolean\n\t * Determines whether or not the provided object is a boolean\n\t *\n\t *\n\t * @method isBoolean\n\t * @memberOf Jx.prototype\n\t *\n\t * @static\n\t * @param {Mixed} o 传入被检测变量的名称\n\t * @return {Boolean} 当 o 的类型是 boolean 时返回 true\n\t */\n\t_.isBoolean = function(o) {\n\t  return (o === false || o) && (o.constructor === Boolean);\n\t};\n\t\n\t/**\n\t * 判断变量的类型是否是 String\n\t * Determines whether or not the provided object is a string\n\t *\n\t *\n\t * @method isString\n\t * @memberOf Jx.prototype\n\t *\n\t * @static\n\t * @param {Mixed} o 传入被检测变量的名称\n\t * @return {Boolean} 当 o 的类型是 string 时返回 true\n\t */\n\t_.isString = function(o) {\n\t  return (o === \"\" || o) && (o.constructor === String);\n\t};\n\t\n\t/**\n\t * 判断变量的类型是否是 Object\n\t * Determines whether or not the provided object is a object\n\t *\n\t *\n\t * @method isObject\n\t * @memberOf Jx.prototype\n\t *\n\t * @param {Mixed} o 传入被检测变量的名称\n\t * @return {Boolean} 当 o 的类型是 object 时返回 true\n\t */\n\t_.isObject = function(o) {\n\t  return o && (o.constructor === Object || Object.prototype.toString.call(o) === \"[object Object]\");\n\t};\n\t\n\t/**\n\t * 判断变量的类型是否是 Array\n\t * Determines whether or not the provided object is a array\n\t *\n\t *\n\t * @method isArray\n\t * @memberOf Jx.prototype\n\t *\n\t * @param {Mixed} o 传入被检测变量的名称\n\t * @return {Boolean} 当 o 的类型是 array 时返回 true\n\t */\n\t_.isArray = function(o) {\n\t  return o && (o.constructor === Array || Object.prototype.toString.call(o) === \"[object Array]\");\n\t};\n\t\n\t/**\n\t * 判断变量的类型是否是 Arguments\n\t * Determines whether or not the provided object is a arguments\n\t *\n\t *\n\t * @method isArguments\n\t * @memberOf Jx.prototype\n\t *\n\t * @param {Mixed} o 传入被检测变量的名称\n\t * @return {Boolean} 当 o 的类型是 arguments 时返回 true\n\t */\n\t_.isArguments = function(o) {\n\t  return o && o.callee && isNumber(o.length) ? true : false;\n\t};\n\t\n\t/**\n\t * 判断变量的类型是否是 Function\n\t * Determines whether or not the provided object is a function\n\t *\n\t *\n\t * @method isFunction\n\t * @memberOf Jx.prototype\n\t *\n\t * @param {Mixed} o 传入被检测变量的名称\n\t * @return {Boolean} 当 o 的类型是 function 时返回 true\n\t */\n\t_.isFunction = function(o) {\n\t  return o && (o.constructor === Function);\n\t};\n\t\n\t/**\n\t * 判断变量类型的方法\n\t * Determines the type of object\n\t *\n\t *\n\t * @method $typeof\n\t * @memberOf Jx.prototype\n\t *\n\t * @param {Mixed} o 传入被检测变量的名称\n\t * @return {String} 返回变量的类型，如果不识别则返回 other\n\t */\n\t_.$typeof = function(o) {\n\t  if (_.isUndefined(o)) {\n\t    return \"undefined\";\n\t  } else if (_.isNull(o)) {\n\t    return \"null\";\n\t  } else if (_.isNumber(o)) {\n\t    return \"number\";\n\t  } else if (_.isBoolean(o)) {\n\t    return \"boolean\";\n\t  } else if (_.isString(o)) {\n\t    return \"string\";\n\t  } else if (_.isObject(o)) {\n\t    return \"object\";\n\t  } else if (_.isArray(o)) {\n\t    return \"array\";\n\t  } else if (_.isArguments(o)) {\n\t    return \"arguments\";\n\t  } else if (_.isFunction(o)) {\n\t    return \"function\";\n\t  } else {\n\t    return \"other\";\n\t  }\n\t};\n\t\n\t/**\n\t * 获取url参数\n\t *\n\t * @method getUrlParam\n\t * @param {String} name 参数名\n\t * @return {String} 获取到的结果\n\t */\n\t_.getUrlParam = function(name) {\n\t  var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\"); // 构造一个含有目标参数的正则表达式对象\n\t  var r = _.decodingURI(window.location.search).substr(1).match(reg); // 匹配目标参数\n\t  if (r != null)\n\t    return r[2];\n\t  return null; // 返回参数值\n\t};\n\t\n\t/**\n\t * 生成随机数的方法\n\t *\n\t * @method random\n\t *\n\t * @param {Number} min 生成随机数的最小值\n\t * @param {Number} max 生成随机数的最大值\n\t * @return {Number} 返回生成的随机数\n\t */\n\t_.random = function(min, max) {\n\t  return Math.floor(Math.random() * (max - min + 1) + min);\n\t};\n\t\n\t/**\n\t * 克隆一个对象\n\t *\n\t * @method clone\n\t *\n\t * @param {Object} o 要克隆的对象\n\t * @return {Object} 返回通过克隆创建的对象\n\t *\n\t * @example\n\t *     var objA = {name: \"John\"};\n\t *     // 克隆一个 objA 对象，并存入 objB 中。\n\t *     var objB = clone(objA);\n\t */\n\t_.clone = function(o){\n\t    /**\n\t     * @ignore\n\t     */\n\t    var Clazz = function(){};\n\t    tempClass.prototype = o;\n\t\n\t    // 返回新克隆的对象\n\t    return (new Clazz());\n\t};\n\t\n\t/**\n\t * 获取当前时间的函数\n\t *\n\t * @method now\n\t *\n\t * @example\n\t * alert(now());\n\t *\n\t */\n\t_.now = function(){\n\t    return +new Date;\n\t};\n\t\n\tmodule.exports = _;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar _obj = __webpack_require__(3);\n\tvar _ = {};\n\t\n\t/**\n\t * 正向查找数组元素在数组中的索引下标\n\t *\n\t * @link http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:indexOf\n\t * @memberOf array\n\t * @function\n\t *\n\t * @param {Array} arr 要执行操作的数组\n\t * @param {Object} obj 要查找的数组的元素\n\t * @param {Number} fromIndex 开始的索引编号\n\t *\n\t * @return {Number}返回正向查找的索引编号\n\t */\n\t_.indexOf = Array.prototype.indexOf ?\n\t\n\t  function() {\n\t    var args = Array.prototype.slice.call(arguments, 1);\n\t    return Array.prototype.indexOf.apply(arguments[0], args);\n\t  } :\n\t  function(arr, obj, fromIndex) {\n\t\n\t    if (fromIndex == null) {\n\t      fromIndex = 0;\n\t    } else if (fromIndex < 0) {\n\t      fromIndex = Math.max(0, arr.length + fromIndex);\n\t    }\n\t    for (var i = fromIndex; i < arr.length; i++) {\n\t      if (arr[i] === obj) {\n\t        return i;\n\t      }\n\t    }\n\t    return -1;\n\t  };\n\t\n\t\n\t\n\t/**\n\t * 反向查找数组元素在数组中的索引下标\n\t *\n\t * @link http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:lastIndexOf\n\t * @memberOf array\n\t * @function\n\t *\n\t * @param {Array} arr 要执行操作的数组\n\t * @param {Object} obj 要查找的数组元素\n\t * @param {Number} fromIndex 开始的索引编号\n\t *\n\t * @return {Number}返回反向查找的索引编号\n\t */\n\t_.lastIndexOf = Array.prototype.lastIndexOf ?\n\t\n\t  function() {\n\t    var args = Array.prototype.slice.call(arguments, 1);\n\t    return Array.prototype.lastIndexOf.apply(arguments[0], args);\n\t  } :\n\t  function(arr, obj, fromIndex) {\n\t    if (fromIndex == null) {\n\t      fromIndex = arr.length - 1;\n\t    } else if (fromIndex < 0) {\n\t      fromIndex = Math.max(0, arr.length + fromIndex);\n\t    }\n\t    for (var i = fromIndex; i >= 0; i--) {\n\t      if (arr[i] === obj) {\n\t        return i;\n\t      }\n\t    }\n\t    return -1;\n\t  };\n\t\n\t/**\n\t * 遍历数组，把每个数组元素作为第一个参数来执行函数\n\t *\n\t * @link http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:forEach\n\t * @memberOf array\n\t * @function\n\t *\n\t * @param {Array} arr 要执行操作的数组\n\t * @param {Function} fun 要执行的函数\n\t * @param {Object} contextObj 执行函数时的上下文对象，可以省略\n\t *\n\t */\n\t_.forEach = Array.prototype.forEach ?\n\t\n\t  function() {\n\t    var args = Array.prototype.slice.call(arguments, 1);\n\t    return Array.prototype.forEach.apply(arguments[0], args);\n\t  } :\n\t  function(arr, fun /*, thisp*/ ) {\n\t    var len = arr.length;\n\t    if (typeof fun != \"function\") {\n\t      throw new TypeError();\n\t    }\n\t    var thisp = arguments[2];\n\t    for (var i = 0; i < len; i++) {\n\t      if (i in arr) {\n\t        fun.call(thisp, arr[i], i, arr);\n\t      }\n\t    }\n\t  };\n\t\n\t/**\n\t * 用一个自定义函数来过滤数组\n\t *\n\t * @link http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:filter\n\t * @memberOf array\n\t * @function\n\t *\n\t * @param {Array} arr 要执行操作的数组\n\t * @param {Function} fun 过滤函数\n\t * @param {Object} contextObj 执行函数时的上下文对象，可以省略\n\t *\n\t * @return {Array}返回筛选出的新数组\n\t */\n\t_.filter = Array.prototype.filter ?\n\t\n\t  function() {\n\t    var args = Array.prototype.slice.call(arguments, 1);\n\t    return Array.prototype.filter.apply(arguments[0], args);\n\t  } :\n\t  function(arr, fun) {\n\t    var len = arr.length;\n\t    if (typeof fun != \"function\") {\n\t      throw new TypeError();\n\t    }\n\t    var res = [];\n\t    var thisp = arguments[2];\n\t    for (var i = 0; i < len; i++) {\n\t      if (i in arr) {\n\t        var val = arr[i]; // in case fun mutates this\n\t        if (fun.call(thisp, val, i, arr)) {\n\t          res.push(val);\n\t        }\n\t      }\n\t    }\n\t    return res;\n\t  };\n\t\n\t\n\t\n\t/**\n\t * 遍历数组，把每个数组元素作为第一个参数来执行函数，如果有任意一个或多个数组成员使得函数执行结果返回 true，则最终返回 true，否则返回 false\n\t *\n\t * @link http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:some\n\t * @memberOf array\n\t * @function\n\t *\n\t * @param {Array} arr 要执行操作的数组\n\t * @param {Function} fun 要执行的函数\n\t * @param {Object} contextObj 执行函数时的上下文对象，可以省略\n\t *\n\t * @return {Boolean}\n\t */\n\t_.some = Array.prototype.some ?\n\t\n\t  function() {\n\t    var args = Array.prototype.slice.call(arguments, 1);\n\t    return Array.prototype.some.apply(arguments[0], args);\n\t  } :\n\t  function(arr, fun /*, thisp*/ ) {\n\t    var len = arr.length;\n\t    if (typeof fun != \"function\") {\n\t      throw new TypeError();\n\t    }\n\t\n\t    var thisp = arguments[2];\n\t    for (var i = 0; i < len; i++) {\n\t      if (i in arr && fun.call(thisp, arr[i], i, arr)) {\n\t        return true;\n\t      }\n\t    }\n\t\n\t    return false;\n\t  };\n\t\n\t\n\t/**\n\t * 遍历数组，把每个数组元素作为第一个参数来执行函数，并把函数的返回结果以映射的方式存入到返回的数组中\n\t *\n\t * @link http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:map\n\t * @memberOf array\n\t * @function\n\t *\n\t * @param {Array} arr 要执行操作的数组\n\t * @param {Function} fun 要执行的函数\n\t * @param {Object} contextObj 执行函数时的上下文对象，可以省略\n\t *\n\t * @return {Array}返回映射后的新数组\n\t */\n\t_.map = Array.prototype.map ?\n\t\n\t  function() {\n\t    var args = Array.prototype.slice.call(arguments, 1);\n\t    return Array.prototype.map.apply(arguments[0], args);\n\t  } :\n\t  function(arr, fun /*, thisp*/ ) {\n\t    var len = arr.length;\n\t    if (typeof fun != \"function\") {\n\t      throw new TypeError();\n\t    }\n\t    var res = new Array(len);\n\t    var thisp = arguments[2];\n\t    for (var i = 0; i < len; i++) {\n\t      if (i in arr) {\n\t        res[i] = fun.call(thisp, arr[i], i, arr);\n\t      }\n\t    }\n\t\n\t    return res;\n\t  };\n\t\n\t\n\t/**\n\t * 遍历数组，把每个数组元素作为第一个参数来执行函数，如果所有的数组成员都使得函数执行结果返回 true，则最终返回 true，否则返回 false\n\t *\n\t * @link http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:every\n\t * @memberOf array\n\t * @function\n\t *\n\t * @param {Array} arr 要执行操作的数组\n\t * @param {Function} fun 要执行的函数\n\t * @param {Object} contextObj 执行函数时的上下文对象，可以省略\n\t *\n\t * @return {Boolean}\n\t */\n\t_.every = Array.prototype.every ?\n\t\n\t  function() {\n\t    var args = Array.prototype.slice.call(arguments, 1);\n\t    return Array.prototype.every.apply(arguments[0], args);\n\t  } :\n\t  function(arr, fun) {\n\t    var len = arr.length;\n\t    if (typeof fun != \"function\") {\n\t      throw new TypeError();\n\t    }\n\t    var thisp = arguments[2];\n\t    for (var i = 0; i < len; i++) {\n\t      if (i in arr && !fun.call(thisp, arr[i], i, arr)) {\n\t        return false;\n\t      }\n\t    }\n\t    return true;\n\t  };\n\t\n\t\n\t\n\t/**\n\t * 对该数组的每项和前一次调用的结果运行一个函数，收集最后的结果。\n\t *\n\t * @link http://developer.mozilla.org/en/docs/Core_JavaScript_1.8_Reference:Objects:Array:reduce\n\t * @memberOf array\n\t * @function\n\t *\n\t * @param {Array} arr 要执行操作的数组\n\t * @param {Function} fun 要执行的函数\n\t * @param {Object} contextObj 执行函数时的上下文对象，可以省略\n\t *\n\t * @return {Boolean}\n\t */\n\t_.reduce = Array.prototype.reduce ?\n\t\n\t  function() {\n\t    var args = Array.prototype.slice.call(arguments, 1);\n\t    return Array.prototype.reduce.apply(arguments[0], args);\n\t  } :\n\t  function(arr, fun /*, initial*/ ) {\n\t    var len = arr.length >>> 0;\n\t    if (typeof fun != \"function\") {\n\t      throw new TypeError();\n\t    }\n\t    // no value to return if no initial value and an empty array\n\t    if (len == 0 && arguments.length == 2) {\n\t      throw new TypeError();\n\t    }\n\t    var i = 0;\n\t    if (arguments.length >= 3) {\n\t      var rv = arguments[2];\n\t    } else {\n\t      do {\n\t        if (i in arr) {\n\t          rv = arr[i++];\n\t          break;\n\t        }\n\t\n\t        // if array contains no values, no initial value to return\n\t        if (++i >= len) {\n\t          throw new TypeError();\n\t        }\n\t      }\n\t      while (true);\n\t    }\n\t\n\t    for (; i < len; i++) {\n\t      if (i in arr) {\n\t        rv = fun.call(null, rv, arr[i], i, arr);\n\t      }\n\t    }\n\t\n\t    return rv;\n\t  };\n\t\n\t\n\t\n\t/**\n\t * 同上，但从右向左执行。\n\t *\n\t * @link http://developer.mozilla.org/en/docs/Core_JavaScript_1.8_Reference:Objects:Array:reduceRight\n\t * @memberOf array\n\t * @function\n\t *\n\t * @param {Array} arr 要执行操作的数组\n\t * @param {Function} fun 要执行的函数\n\t * @param {Object} contextObj 执行函数时的上下文对象，可以省略\n\t *\n\t * @return {Boolean}\n\t */\n\t_.reduceRight = Array.prototype.reduceRight ?\n\t\n\t  function() {\n\t    var args = Array.prototype.slice.call(arguments, 1);\n\t    return Array.prototype.reduceRight.apply(arguments[0], args);\n\t  } :\n\t  function(arr, fun /*, initial*/ ) {\n\t    var len = arr.length >>> 0;\n\t    if (typeof fun != \"function\") {\n\t      throw new TypeError();\n\t    }\n\t    // no value to return if no initial value, empty array\n\t    if (len == 0 && arguments.length == 2) {\n\t      throw new TypeError();\n\t    }\n\t    var i = len - 1;\n\t    if (arguments.length >= 3) {\n\t      var rv = arguments[2];\n\t    } else {\n\t      do {\n\t        if (i in arr) {\n\t          rv = arr[i--];\n\t          break;\n\t        }\n\t\n\t        // if array contains no values, no initial value to return\n\t        if (--i < 0) {\n\t          throw new TypeError();\n\t        }\n\t      }\n\t      while (true);\n\t    }\n\t\n\t    for (; i >= 0; i--) {\n\t      if (i in arr) {\n\t        rv = fun.call(null, rv, arr[i], i, arr);\n\t      }\n\t    }\n\t\n\t    return rv;\n\t  };\n\t\n\t\n\t\n\t/**\n\t * 将任意变量转换为数组的方法\n\t *\n\t * @memberOf array\n\t * @param {Mixed} o 任意变量\n\t * @return {Array} 返回转换后的数组\n\t */\n\t_.toArray = function(o) {\n\t  var type = _obj.$typeof(o);\n\t  return (type) ? ((type != 'array' && type != 'arguments') ? [o] : o) : [];\n\t};\n\t\n\t\n\t\n\t/**\n\t * 从数组中移除一个或多个数组成员\n\t *\n\t * @memberOf array\n\t * @param {Array} arr 要移除的数组成员，可以是单个成员也可以是成员的数组\n\t * @return {Boolean} 找到并移除, 返回 true\n\t */\n\t_.remove = function(arr, members) {\n\t  var members = _.toArray(members),\n\t    i,\n\t    j,\n\t    flag = false;\n\t  for (i = 0; i < members.length; i++) {\n\t    for (j = 0; j < arr.length; j++) {\n\t      if (arr[j] === members[i]) {\n\t        arr.splice(j, 1);\n\t        flag = true;\n\t      }\n\t    }\n\t  }\n\t  return flag;\n\t};\n\t\n\t/**\n\t * 替换一个数组成员\n\t *\n\t * @memberOf array\n\t * @param {Object} oldValue 当前数组成员\n\t * @param {Object} newValue 要替换成的值\n\t * @return {Boolean} 如果找到旧值并成功替换则返回 true，否则返回 false\n\t */\n\t_.replace = function(arr, oldValue, newValue) {\n\t  var i;\n\t  for (i = 0; i < arr.length; i++) {\n\t    if (arr[i] === oldValue) {\n\t      arr[i] = newValue;\n\t      return true;\n\t    }\n\t  }\n\t  return false;\n\t};\n\t\n\t/**\n\t * 冒泡排序,默认从小到大排序\n\t * @memberOf array\n\t * @param {Array} arr 需要排序的数组\n\t * @param {Function} compareFunc 比较方法, 传入两个参数 a,b, 若返回 大于0 则表示 a > b, 小于 0 则 a < b\n\t *  可选, 默认返回 a - b的结果\n\t * @return {Array} 排序后的数组\n\t * @example\n\t *\n\t * bubbleSort([3,5,6,2], function(a, b){\n\t *  return a - b;\n\t * });\n\t *\n\t */\n\t_.bubbleSort = function(arr, compareFunc) {\n\t  compareFunc = compareFunc || function(num1, num2) {\n\t    return num1 - num2;\n\t  };\n\t  //数组长度\n\t  var n = arr.length;\n\t  //交换顺序的临时变量\n\t  var temp; //\n\t  //交换标志\n\t  var exchange;\n\t  //最多做n-1趟排序\n\t  for (var time = 0; time < n - 1; time++) {\n\t    exchange = false;\n\t    for (var i = n - 1; i > time; i--) {\n\t      if (compareFunc(arr[i], arr[i - 1]) < 0) {\n\t        //if (arr[i] < arr[i - 1]) {\n\t        exchange = true;\n\t        temp = arr[i - 1];\n\t        arr[i - 1] = arr[i];\n\t        arr[i] = temp;\n\t      }\n\t    }\n\t    //若本趟排序未发生交换，提前终止算法\n\t    if (!exchange) {\n\t      break;\n\t    }\n\t  }\n\t  return arr;\n\t};\n\t\n\t/**\n\t * 二叉搜索\n\t * @memberOf array\n\t * @param {Array} arr 源数组\n\t * @param {Object} item 查找的目标\n\t * @param {Function} compareFunc 比较方法, 传入两个参数 a,b, 若返回 大于0 则表示 a > b, 小于 0 则 a < b\n\t * @return {Number} item 所处的 index\n\t *\n\t */\n\t_.binarySearch = function(arr, item, compareFunc) {\n\t  var start = 0;\n\t  var end = arr.length;\n\t  var current = Math.floor(arr.length / 2);\n\t  while (end != current) {\n\t    if (compareFunc(item, arr[current]) > 0) {\n\t      start = current + 1;\n\t    } else {\n\t      end = current;\n\t    };\n\t\n\t    current = Math.floor((start + end) / 2);\n\t  };\n\t  return current;\n\t};\n\t\n\t/**\n\t * 判断arr是否包含元素o\n\t * @memberOf array\n\t * @name contains\n\t * @function\n\t * @param {Array} arr\n\t * @param {Obejct} o\n\t * @return {Boolean}\n\t */\n\t_.contains = function(arr, o) {\n\t  return (_.indexOf(arr, o) > -1);\n\t};\n\t\n\t/**\n\t * 唯一化一个数组\n\t * @memberOf array\n\t * @param {Array} arr\n\t * @return {Array} 由不重复元素构成的数组\n\t */\n\t_.uniquelize = function(arr) {\n\t  var result = [];\n\t  for (var i = 0, len = arr.length; i < len; i++) {\n\t    if (!_.contains(result, arr[i])) {\n\t      result.push(arr[i]);\n\t    }\n\t  }\n\t  return result;\n\t};\n\t\n\t/**\n\t * 求两个集合的交集\n\t * a ∩ b\n\t * @memberOf array\n\t * @param {Array} a\n\t * @param {Array} b\n\t * @return {Array} a ∩ b\n\t */\n\t_.intersect = function(a, b) {\n\t  var result = [];\n\t  for (var i = 0, len = a.length; i < len; i++) {\n\t    if (_.contains(b, a[i])) {\n\t      result.push(a[i]);\n\t    }\n\t  }\n\t  return result;\n\t};\n\t\n\t/**\n\t * 求两个集合的差集\n\t * a - b\n\t * @memberOf array\n\t * @param {Array} a\n\t * @param {Array} b\n\t * @return {Array} a - b\n\t */\n\t_.minus = function(a, b) {\n\t  var result = [];\n\t  for (var i = 0, len = a.length; i < len; i++) {\n\t    if (!_.contains(b, a[i])) {\n\t      result.push(a[i]);\n\t    }\n\t  }\n\t  return result;\n\t};\n\t\n\t/**\n\t * 求两个集合的并集\n\t * a U b\n\t * @memberOf array\n\t * @param {Array} a\n\t * @param {Array} b\n\t * @return {Array} a U b\n\t */\n\t_.union = function(a, b) {\n\t  return _.uniquelize(a.concat(b));\n\t};\n\t\n\t\n\tmodule.exports = {\n\t  array: _\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t/**\n\t * format 扩展包\n\t */\n\tvar _ = {};\n\t\n\t/**\n\t * 让日期和时间按照指定的格式显示的方法\n\t * @method date\n\t * @memberOf format\n\t * @param {String} format 格式字符串\n\t * @return {String} 返回生成的日期时间字符串\n\t *\n\t * @example\n\t *     var d = new Date();\n\t *     // 以 YYYY-MM-dd hh:mm:ss 格式输出 d 的时间字符串\n\t *     format.date(d, \"YYYY-MM-DD hh:mm:ss\");\n\t *\n\t */\n\t_.date = function(date, formatString) {\n\t  /*\n\t   * eg:formatString=\"YYYY-MM-DD hh:mm:ss\";\n\t   */\n\t  var o = {\n\t    \"M+\": date.getMonth() + 1, //month\n\t    \"D+\": date.getDate(), //day\n\t    \"h+\": date.getHours(), //hour\n\t    \"m+\": date.getMinutes(), //minute\n\t    \"s+\": date.getSeconds(), //second\n\t    \"q+\": Math.floor((date.getMonth() + 3) / 3), //quarter\n\t    \"S\": date.getMilliseconds() //millisecond\n\t  }\n\t\n\t  if (/(Y+)/.test(formatString)) {\n\t    formatString = formatString.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n\t  }\n\t\n\t  for (var k in o) {\n\t    if (new RegExp(\"(\" + k + \")\").test(formatString)) {\n\t      formatString = formatString.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : (\"00\" + o[k]).substr((\"\" + o[k]).length));\n\t    }\n\t  }\n\t  return formatString;\n\t};\n\t\n\t/**\n\t * @memberOf format\n\t * @method number\n\t * 格式化数字显示方式\n\t * @param num 要格式化的数字\n\t * @param pattern 格式\n\t * @example\n\t * format.number(12345.999,'#,##0.00');\n\t *  //out: 12,34,5.99\n\t * format.number(12345.999,'0');\n\t *  //out: 12345\n\t * format.number(1234.888,'#.0');\n\t *  //out: 1234.8\n\t * format.number(1234.888,'000000.000000');\n\t *  //out: 001234.888000\n\t */\n\t_.number = function(num, pattern) {\n\t  var strarr = num ? num.toString().split('.') : ['0'];\n\t  var fmtarr = pattern ? pattern.split('.') : [''];\n\t  var retstr = '';\n\t\n\t  // 整数部分\n\t  var str = strarr[0];\n\t  var fmt = fmtarr[0];\n\t  var i = str.length - 1;\n\t  var comma = false;\n\t  for (var f = fmt.length - 1; f >= 0; f--) {\n\t    switch (fmt.substr(f, 1)) {\n\t      case '':\n\t        if (i >= 0)\n\t          retstr = str.substr(i--, 1) + retstr;\n\t        break;\n\t      case '0':\n\t        if (i >= 0)\n\t          retstr = str.substr(i--, 1) + retstr;\n\t        else\n\t          retstr = '0' + retstr;\n\t        break;\n\t      case ',':\n\t        comma = true;\n\t        retstr = ',' + retstr;\n\t        break;\n\t    }\n\t  }\n\t  if (i >= 0) {\n\t    if (comma) {\n\t      var l = str.length;\n\t      for (; i >= 0; i--) {\n\t        retstr = str.substr(i, 1) + retstr;\n\t        if (i > 0 && ((l - i) % 3) == 0)\n\t          retstr = ',' + retstr;\n\t      }\n\t    } else\n\t      retstr = str.substr(0, i + 1) + retstr;\n\t  }\n\t\n\t  retstr = retstr + '.';\n\t  // 处理小数部分\n\t  str = strarr.length > 1 ? strarr[1] : '';\n\t  fmt = fmtarr.length > 1 ? fmtarr[1] : '';\n\t  i = 0;\n\t  for (var f = 0; f < fmt.length; f++) {\n\t    switch (fmt.substr(f, 1)) {\n\t      case '':\n\t        if (i < str.length)\n\t          retstr += str.substr(i++, 1);\n\t        break;\n\t      case '0':\n\t        if (i < str.length)\n\t          retstr += str.substr(i++, 1);\n\t        else\n\t          retstr += '0';\n\t        break;\n\t    }\n\t  }\n\t  return retstr.replace(/^,+/, '').replace(/\\.$/, '');\n\t};\n\t\n\tmodule.exports = {\n\t  /**\n\t   * number 名字空间\n\t   *\n\t   * @namespace\n\t   * @name format\n\t   * @type Object\n\t   */\n\t  format: _\n\t};\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tvar _ = {};\n\t\n\t/**\n\t * cookie类\n\t *\n\t */\n\tvar domainPrefix = window.location.host;\n\t\n\t/**\n\t * cookie 名字空间\n\t * @namespace\n\t * @name cookie\n\t */\n\tvar cookie =\n\t/**\n\t * @lends cookie\n\t */\n\t{\n\t\n\t    /**\n\t     * 设置一个cookie\n\t     *\n\t     * @param {String} name cookie名称\n\t     * @param {String} value cookie值\n\t     * @param {String} domain 所在域名\n\t     * @param {String} path 所在路径\n\t     * @param {Number} hour 存活时间，单位:小时\n\t     * @return {Boolean} 是否成功\n\t     */\n\t    set : function(name, value, domain, path, hour) {\n\t        if (hour) {\n\t            var today = new Date();\n\t            var expire = new Date();\n\t            expire.setTime(today.getTime() + 3600000 * hour);\n\t        }\n\t        window.document.cookie = name + \"=\" + value + \"; \" + (hour ? (\"expires=\" + expire.toGMTString() + \"; \") : \"\") + (path ? (\"path=\" + path + \"; \") : \"path=/; \") + (domain ? (\"domain=\" + domain + \";\") : (\"domain=\" + domainPrefix + \";\"));\n\t        return true;\n\t    },\n\t\n\t    /**\n\t     * 获取指定名称的cookie值\n\t     *\n\t     * @param {String} name cookie名称\n\t     * @return {String} 获取到的cookie值\n\t     */\n\t    get : function(name) {\n\t        var r = new RegExp(\"(?:^|;+|\\\\s+)\" + name + \"=([^;]*)\");\n\t        // var r = new RegExp(\"(?:^|;+|\\\\s+)\" + name + \"=([^;]*?)(?:;|$)\");\n\t        var m = window.document.cookie.match(r);\n\t        return (!m ? \"\" : m[1]);\n\t        // document.cookie.match(new\n\t        // RegExp(\"(?:^|;+|\\\\s+)speedMode=([^;]*?)(?:;|$)\"))\n\t    },\n\t\n\t    /**\n\t     * 删除指定cookie,复写为过期\n\t     *\n\t     * @param {String} name cookie名称\n\t     * @param {String} domain 所在域\n\t     * @param {String} path 所在路径\n\t     */\n\t    remove : function(name, domain, path) {\n\t        window.document.cookie = name + \"=; expires=Mon, 26 Jul 1997 05:00:00 GMT; \" + (path ? (\"path=\" + path + \"; \") : \"path=/; \") + (domain ? (\"domain=\" + domain + \";\") : (\"domain=\" + domainPrefix + \";\"));\n\t    }\n\t};\n\t\n\t\n\t/**\n\t * localStorage 名字空间\n\t * @namespace\n\t * @name localStorage\n\t */\n\tvar localStorage =\n\t/**\n\t * @lends localStorage\n\t */\n\t{\n\t\n\t    /**\n\t     * 设置一个localStorage\n\t     * @param {String} name\n\t     * @param {String} value\n\t     */\n\t    setItem : function(name, value) {\n\t        if(this.isSupports()){\n\t            window.localStorage.setItem(name,value);\n\t        }\n\t    },\n\t    /**\n\t     * 根据名字读取值\n\t     * @param {String} name\n\t     * @return {String}\n\t     */\n\t    getItem : function(name) {\n\t        if(this.isSupports()){\n\t            return window.localStorage.getItem(name);\n\t        }\n\t        return null;\n\t    },\n\t    /**\n\t     * 根据名字移除值\n\t     * @param {String} name\n\t     */\n\t    removeItem : function(name) {\n\t        if(this.isSupports()){\n\t            window.localStorage.removeItem(name);\n\t        }\n\t    },\n\t    /**\n\t     * 清空 localStorage\n\t     */\n\t    clear : function(){\n\t        if(this.isSupports()){\n\t            window.localStorage.clear();\n\t        }\n\t    },\n\t    /**\n\t     * 判断是否支持 localStorage\n\t     */\n\t    isSupports : function(){\n\t        return ('localStorage' in window) && window['localStorage']!== null;\n\t    }\n\t};\n\t\n\tmodule.exports = {\n\t  cookie: cookie,\n\t  localStorage: localStorage\n\t};\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tvar _ = {};\n\t\n\t/**\n\t * 将任意变量转换为字符串\n\t *\n\t * @method toString\n\t * @memberOf string\n\t *\n\t * @param {Mixed} o 变量\n\t * @return {String} 返回转换后的字符串\n\t */\n\t_.toString = function(obj) {\n\t  return (obj + \"\");\n\t};\n\t\n\t/**\n\t * 判断是否是一个可接受的 url 串\n\t *\n\t * @method isURL\n\t * @memberOf string\n\t *\n\t * @param {String} str 要检测的字符串\n\t * @return {Boolean} 如果是可接受的 url 则返回 true\n\t */\n\t_.isURL = function(str) {\n\t  return _.isURL.RE.test(str);\n\t};\n\t\n\t/**\n\t * 判断是否为一个有效的URL\n\t * @type {RegExp}\n\t */\n\t_.isURL.RE = /^(?:ht|f)tp(?:s)?\\:\\/\\/(?:[\\w\\-\\.]+)\\.\\w+/i;\n\t\n\t/**\n\t * 分解 URL 为一个对象，成员为：scheme, user, pass, host, port, path, query, fragment\n\t *\n\t * @method parseURL\n\t * @memberOf string\n\t *\n\t * @param {String} str URL 地址\n\t * @return {Object} 如果解析失败则返回 null\n\t */\n\t_.parseURL = function(str) {\n\t  var ret = null;\n\t\n\t  if (null !== (ret = _.parseURL.RE.exec(str))) {\n\t    var spec = {};\n\t    for (var i = 0, j = _.parseURL.SPEC.length; i < j; i++) {\n\t      var curSpec = _.parseURL.SPEC[i];\n\t      spec[curSpec] = ret[i + 1];\n\t    }\n\t    ret = spec;\n\t    spec = null;\n\t  }\n\t\n\t  return ret;\n\t};\n\t\n\t/**\n\t * @ignore\n\t */\n\t_.parseURL.SPEC = ['scheme', 'user', 'pass', 'host', 'port', 'path', 'query', 'fragment'];\n\t_.parseURL.RE = /^([^:]+):\\/\\/(?:([^:@]+):?([^@]*)@)?(?:([^/?#:]+):?(\\d*))([^?#]*)(?:\\?([^#]+))?(?:#(.+))?$/;\n\t\n\t/**\n\t * 将 url 的查询字符串参数映射成对象\n\t *\n\t * @method mapQuery\n\t * @memberOf string\n\t *\n\t * @param {String} uri 要映射的 uri\n\t * @return {Object} 按照 uri 映射成的对象\n\t *\n\t * @example\n\t *  var url = \"http://domain.com/?p1=1&p2=2\";\n\t *  mapQuery(url); // { p1:1, p2:2 }\n\t * };\n\t */\n\t_.mapQuery = function(uri) {\n\t  //window.location.search\n\t  var i,\n\t    key,\n\t    value,\n\t    uri = uri && uri.split('#')[0] || window.location.search, //remove hash\n\t    index = uri.indexOf(\"?\"),\n\t    pieces = uri.substring(index + 1).split(\"&\"),\n\t    params = {};\n\t  //如果连?号都没有,直接返回,不进行处理.\n\t  if (index === -1) {\n\t    return params;\n\t  }\n\t  for (i = 0; i < pieces.length; i++) {\n\t    try {\n\t      index = pieces[i].indexOf(\"=\");\n\t      key = pieces[i].substring(0, index);\n\t      value = pieces[i].substring(index + 1);\n\t      if (!(params[key] = unescape(value))) {\n\t        throw new Error(\"uri has wrong query string when run mapQuery.\");\n\t      }\n\t    } catch (e) {\n\t      throw new Error(\"错误：has wrong when run mapQuery.\");\n\t    }\n\t  }\n\t  return params;\n\t};\n\t\n\t\n\t/**\n\t * 判断是否含有指定的字符串\n\t *\n\t * @memberOf string\n\t * @name contains\n\t * @function\n\t * @param {String} string 是否含有的字符串\n\t * @param {String} separator 分隔符，可选(有分隔符则判断两个字符串是否一致)\n\t * @return {Boolean} 如果含有，返回 true，否则返回 false\n\t */\n\t_.contains = function(string1, string2, separator){\n\t    return (separator) ? (separator + string1 + separator).indexOf(separator + string2 + separator) > -1 : string1.indexOf(string2) > -1;\n\t};\n\t/**\n\t * 清除字符串开头和结尾的空格\n\t *\n\t * @memberOf string\n\t *\n\t * @return {String} 返回清除后的字符串\n\t */\n\t_.trim = function(string){\n\t    return String(string).replace(/^\\s+|\\s+$/g, '');\n\t};\n\t\n\t/**\n\t * 清除字符串开头和结尾的空格，并把字符串之间的多个空格转换为一个空格\n\t *\n\t * @memberOf string\n\t *\n\t * @return {String} 返回清除后的字符串\n\t */\n\t_.clean = function(string){\n\t    return _.trim(string.replace(/\\s+/g, ' '));\n\t};\n\t\n\t/**\n\t * 将“-”连接的字符串转换成驼峰式写法\n\t *\n\t * @memberOf string\n\t *\n\t * @return {String} 返回转换后的字符串\n\t */\n\t_.camelCase = function(string){\n\t    return _.toString(string).replace(/-\\D/g, function(match){\n\t        return match.charAt(1).toUpperCase();\n\t    });\n\t};\n\t\n\t/**\n\t * 将驼峰式写法字符串转换成“-”连接的\n\t *\n\t * @memberOf string\n\t *\n\t * @return {String} 返回转换后的字符串\n\t */\n\t_.hyphenate = function(string){\n\t    return _.toString(string).replace(/[A-Z]/g, function(match){\n\t        return ('-' + match.charAt(0).toLowerCase());\n\t    });\n\t};\n\t\n\t/**\n\t * 将字符串转换成首字母大写\n\t *\n\t * @memberOf string\n\t *\n\t * @return {String} 返回转换后的字符串\n\t */\n\t_.capitalize = function(string){\n\t    return _.toString(string).replace(/\\b[a-z]/g, function(match){\n\t        return match.toUpperCase();\n\t    });\n\t};\n\t\n\t/**\n\t * 将字符串转换成整数\n\t *\n\t * @memberOf string\n\t *\n\t * @return {Number} 返回转换后的整数\n\t */\n\t_.toInt = function(string, base){\n\t    return parseInt(string, base || 10);\n\t};\n\t\n\t/**\n\t * 将字符串转换成浮点数\n\t *\n\t * @memberOf string\n\t * @param {Sring} string 要转换的字符串\n\t * @return {Number} 返回转换后的浮点数\n\t */\n\t_.toFloat = function(string){\n\t    return parseFloat(string);\n\t};\n\t\n\t/**\n\t * 将颜色 Hex 写法转换成 RGB 写法\n\t *\n\t * @memberOf string\n\t * @return {String} 返回转换后的字符串\n\t * @author rewrite by dmyang\n\t */\n\t_.hexToRgb = function(string){\n\t    var hex = string.match(/^#?(\\w{1,2})(\\w{1,2})(\\w{1,2})$/);\n\t    var _convert = function(array) {\n\t        var length = array.length;\n\t        if (length !== 3) return null;\n\t        for(var i=0, value; i<length; i++) {\n\t            value = array[i];\n\t            if(value.length === 1) value += value;\n\t            array[i] = parseInt(value, 16);\n\t        }\n\t        return 'rgb(' + array + ')';\n\t    };\n\t    return (hex) ? _convert(hex.slice(1)) : null;\n\t};\n\t\n\t/**\n\t * 将颜色 RGB 写法转换成 Hex 写法\n\t *\n\t * @memberOf string\n\t * @return {String} 返回转换后的字符串\n\t * @author rewrite by dmyang\n\t */\n\t_.rgbToHex = function(string){\n\t    var r = string.match(/\\d{1,3}/g);\n\t    return (r) ? '#' + ((1 << 24) + ((r[0] << 0) << 16) + ((r[1] << 0) << 8) + (r[2] << 0)).toString(16).slice(1) : null;\n\t};\n\t\n\t/**\n\t * 编码查询参数\n\t *\n\t * @memberOf string\n\t * @param {string} key 要编码的查询参数名字\n\t * @param {string} value 要编码的查询参数值\n\t * @return {String} 返回编码后的查询字符串\n\t */\n\t_.toQueryPair = function(key, value) {\n\t    return encodeURIComponent(String(key)) + \"=\" + encodeURIComponent(String(value));\n\t}\n\t\n\t/**\n\t * 将对象转换为查询参数字符串\n\t *\n\t * @memberOf string\n\t * @param {Object} obj 要转换成查询字符串的对象\n\t * @return {String} 返回转换后的查询参数字符串\n\t */\n\t_.toQueryString = function(obj){\n\t    var result=[];\n\t    for(var key in obj){\n\t        result.push(_.toQueryPair(key, obj[key]));\n\t    }\n\t    return result.join(\"&\");\n\t}\n\t\n\t/**\n\t * 全局替换指定的字符串\n\t *\n\t * @memberOf string\n\t * @param {Object} string 需要替换字符串的字符串\n\t * @param {Object} reallyDo 需要替换什么字符串\n\t * @param {Object} replaceWith 替换为\n\t * @param {Object} ignoreCase 是否忽略大小写\n\t * @return {String} 返回替换后的字符串\n\t */\n\t_.replaceAll = function(string, reallyDo, replaceWith, ignoreCase) {\n\t    if (!RegExp.prototype.isPrototypeOf(reallyDo)) {\n\t        return string.replace(new RegExp(reallyDo, (ignoreCase ? \"gi\": \"g\")), replaceWith);\n\t    } else {\n\t        return string.replace(reallyDo, replaceWith);\n\t    }\n\t};\n\t\n\t/**\n\t * 判断给定字符串是否是数字\n\t * @memberOf string\n\t * @name isNumber\n\t * @function\n\t *\n\t * @param {String} string\n\t * @param {Number} n\n\t * @return {String}\n\t */\n\t_.isNumber = function(string){\n\t    return _.toString(string).search(/^\\d+$/) !== -1;\n\t};\n\t\n\t/**\n\t * 判断给定字符串是否是邮箱格式\n\t * @memberOf string\n\t * @param {String} emailStr\n\t * @return {Boolean}\n\t */\n\t_.isEmail = function(string){\n\t  return string.search(/^\\w+((-\\w+)|(\\.\\w+))*\\@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/) !== -1;\n\t};\n\t\n\tmodule.exports = {\n\t  string: _\n\t};\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar map = {\n\t\t\"./core\": 1,\n\t\t\"./core.js\": 1,\n\t\t\"./index\": 2,\n\t\t\"./index.js\": 2,\n\t\t\"./utils/array\": 4,\n\t\t\"./utils/array.js\": 4,\n\t\t\"./utils/format\": 5,\n\t\t\"./utils/format.js\": 5,\n\t\t\"./utils/object\": 3,\n\t\t\"./utils/object.js\": 3,\n\t\t\"./utils/storage\": 6,\n\t\t\"./utils/storage.js\": 6,\n\t\t\"./utils/string\": 7,\n\t\t\"./utils/string.js\": 7\n\t};\n\tfunction webpackContext(req) {\n\t\treturn __webpack_require__(webpackContextResolve(req));\n\t};\n\tfunction webpackContextResolve(req) {\n\t\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n\t};\n\twebpackContext.keys = function webpackContextKeys() {\n\t\treturn Object.keys(map);\n\t};\n\twebpackContext.resolve = webpackContextResolve;\n\tmodule.exports = webpackContext;\n\twebpackContext.id = 8;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** index.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap f221155b7789cb4a7544\n **/","var wheel = require('./src/index');\nmodule.exports = new wheel();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/","/**\n * Wheel对象\n *\n * @return {[type]} [description]\n */\nvar _ = function() {};\n\n_.fn = _.prototype;\n\n_.fn.mixin = _.mixin = function(destination, source) {\n  for (var property in source)\n    destination[property] = source[property];\n  return destination;\n};\n\nmodule.exports = _;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/core.js\n ** module id = 1\n ** module chunks = 0\n **/","var _ = require('./core');\n\nvar exts = ['./utils/object','./utils/string','./utils/array','./utils/format','./utils/storage'];\nfor (var i = exts.length - 1; i >= 0; i--) {\n  var path = exts[i];\n  var ext = require(path);\n  _.mixin(_.fn,ext);\n};\n\nmodule.exports = _;\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 2\n ** module chunks = 0\n **/","var _ = {};\n\n/**\n * 判断当前obj是否为空\n *\n * @method isEmpty\n * @param {Object} obj 需要验证的对象\n * @return {Boolean} obj是否为空,返回true则为空，返回false则不为空\n */\n_.isEmpty = function(obj) {\n  return (!(Boolean($.trim(obj) || obj === 0)) || obj == \"null\" || obj == \"undefined\");\n};\n\n/**\n * 判断变量的值是否是 undefined\n * Determines whether or not the provided object is undefined\n *\n * @method isUndefined\n * @memberOf Jx.prototype\n *\n * @param {Mixed} o 传入被检测变量的名称\n * @return {Boolean} 当 o 的值是 undefined 时返回 true\n */\n_.isUndefined = function(o) {\n  return typeof(o) === \"undefined\";\n};\n\n/**\n * 判断变量的值是否是 null\n * Determines whether or not the provided object is null\n *\n * @method isNull\n * @memberOf Jx.prototype\n *\n * @param {Mixed} o 传入被检测变量的名称\n * @return {Boolean} 当 o 的值是 null 时返回 true\n */\n_.isNull = function(o) {\n  return o === null;\n};\n\n/**\n * 判断变量的类型是否是 Number\n * Determines whether or not the provided object is a number\n *\n * @memberOf Jx.prototype\n * @name isNumber\n * @function\n * @param {Mixed} o 传入被检测变量的名称\n * @return {Boolean} 当 o 的类型是 number 时返回 true\n */\n_.isNumber = function(o) {\n  return (o === 0 || o) && o.constructor === Number;\n};\n\n/**\n * 判断变量的类型是否是 Boolean\n * Determines whether or not the provided object is a boolean\n *\n *\n * @method isBoolean\n * @memberOf Jx.prototype\n *\n * @static\n * @param {Mixed} o 传入被检测变量的名称\n * @return {Boolean} 当 o 的类型是 boolean 时返回 true\n */\n_.isBoolean = function(o) {\n  return (o === false || o) && (o.constructor === Boolean);\n};\n\n/**\n * 判断变量的类型是否是 String\n * Determines whether or not the provided object is a string\n *\n *\n * @method isString\n * @memberOf Jx.prototype\n *\n * @static\n * @param {Mixed} o 传入被检测变量的名称\n * @return {Boolean} 当 o 的类型是 string 时返回 true\n */\n_.isString = function(o) {\n  return (o === \"\" || o) && (o.constructor === String);\n};\n\n/**\n * 判断变量的类型是否是 Object\n * Determines whether or not the provided object is a object\n *\n *\n * @method isObject\n * @memberOf Jx.prototype\n *\n * @param {Mixed} o 传入被检测变量的名称\n * @return {Boolean} 当 o 的类型是 object 时返回 true\n */\n_.isObject = function(o) {\n  return o && (o.constructor === Object || Object.prototype.toString.call(o) === \"[object Object]\");\n};\n\n/**\n * 判断变量的类型是否是 Array\n * Determines whether or not the provided object is a array\n *\n *\n * @method isArray\n * @memberOf Jx.prototype\n *\n * @param {Mixed} o 传入被检测变量的名称\n * @return {Boolean} 当 o 的类型是 array 时返回 true\n */\n_.isArray = function(o) {\n  return o && (o.constructor === Array || Object.prototype.toString.call(o) === \"[object Array]\");\n};\n\n/**\n * 判断变量的类型是否是 Arguments\n * Determines whether or not the provided object is a arguments\n *\n *\n * @method isArguments\n * @memberOf Jx.prototype\n *\n * @param {Mixed} o 传入被检测变量的名称\n * @return {Boolean} 当 o 的类型是 arguments 时返回 true\n */\n_.isArguments = function(o) {\n  return o && o.callee && isNumber(o.length) ? true : false;\n};\n\n/**\n * 判断变量的类型是否是 Function\n * Determines whether or not the provided object is a function\n *\n *\n * @method isFunction\n * @memberOf Jx.prototype\n *\n * @param {Mixed} o 传入被检测变量的名称\n * @return {Boolean} 当 o 的类型是 function 时返回 true\n */\n_.isFunction = function(o) {\n  return o && (o.constructor === Function);\n};\n\n/**\n * 判断变量类型的方法\n * Determines the type of object\n *\n *\n * @method $typeof\n * @memberOf Jx.prototype\n *\n * @param {Mixed} o 传入被检测变量的名称\n * @return {String} 返回变量的类型，如果不识别则返回 other\n */\n_.$typeof = function(o) {\n  if (_.isUndefined(o)) {\n    return \"undefined\";\n  } else if (_.isNull(o)) {\n    return \"null\";\n  } else if (_.isNumber(o)) {\n    return \"number\";\n  } else if (_.isBoolean(o)) {\n    return \"boolean\";\n  } else if (_.isString(o)) {\n    return \"string\";\n  } else if (_.isObject(o)) {\n    return \"object\";\n  } else if (_.isArray(o)) {\n    return \"array\";\n  } else if (_.isArguments(o)) {\n    return \"arguments\";\n  } else if (_.isFunction(o)) {\n    return \"function\";\n  } else {\n    return \"other\";\n  }\n};\n\n/**\n * 获取url参数\n *\n * @method getUrlParam\n * @param {String} name 参数名\n * @return {String} 获取到的结果\n */\n_.getUrlParam = function(name) {\n  var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\"); // 构造一个含有目标参数的正则表达式对象\n  var r = _.decodingURI(window.location.search).substr(1).match(reg); // 匹配目标参数\n  if (r != null)\n    return r[2];\n  return null; // 返回参数值\n};\n\n/**\n * 生成随机数的方法\n *\n * @method random\n *\n * @param {Number} min 生成随机数的最小值\n * @param {Number} max 生成随机数的最大值\n * @return {Number} 返回生成的随机数\n */\n_.random = function(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\n/**\n * 克隆一个对象\n *\n * @method clone\n *\n * @param {Object} o 要克隆的对象\n * @return {Object} 返回通过克隆创建的对象\n *\n * @example\n *     var objA = {name: \"John\"};\n *     // 克隆一个 objA 对象，并存入 objB 中。\n *     var objB = clone(objA);\n */\n_.clone = function(o){\n    /**\n     * @ignore\n     */\n    var Clazz = function(){};\n    tempClass.prototype = o;\n\n    // 返回新克隆的对象\n    return (new Clazz());\n};\n\n/**\n * 获取当前时间的函数\n *\n * @method now\n *\n * @example\n * alert(now());\n *\n */\n_.now = function(){\n    return +new Date;\n};\n\nmodule.exports = _;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/utils/object.js\n ** module id = 3\n ** module chunks = 0\n **/","var _obj = require('./object');\nvar _ = {};\n\n/**\n * 正向查找数组元素在数组中的索引下标\n *\n * @link http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:indexOf\n * @memberOf array\n * @function\n *\n * @param {Array} arr 要执行操作的数组\n * @param {Object} obj 要查找的数组的元素\n * @param {Number} fromIndex 开始的索引编号\n *\n * @return {Number}返回正向查找的索引编号\n */\n_.indexOf = Array.prototype.indexOf ?\n\n  function() {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return Array.prototype.indexOf.apply(arguments[0], args);\n  } :\n  function(arr, obj, fromIndex) {\n\n    if (fromIndex == null) {\n      fromIndex = 0;\n    } else if (fromIndex < 0) {\n      fromIndex = Math.max(0, arr.length + fromIndex);\n    }\n    for (var i = fromIndex; i < arr.length; i++) {\n      if (arr[i] === obj) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\n\n\n/**\n * 反向查找数组元素在数组中的索引下标\n *\n * @link http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:lastIndexOf\n * @memberOf array\n * @function\n *\n * @param {Array} arr 要执行操作的数组\n * @param {Object} obj 要查找的数组元素\n * @param {Number} fromIndex 开始的索引编号\n *\n * @return {Number}返回反向查找的索引编号\n */\n_.lastIndexOf = Array.prototype.lastIndexOf ?\n\n  function() {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return Array.prototype.lastIndexOf.apply(arguments[0], args);\n  } :\n  function(arr, obj, fromIndex) {\n    if (fromIndex == null) {\n      fromIndex = arr.length - 1;\n    } else if (fromIndex < 0) {\n      fromIndex = Math.max(0, arr.length + fromIndex);\n    }\n    for (var i = fromIndex; i >= 0; i--) {\n      if (arr[i] === obj) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\n/**\n * 遍历数组，把每个数组元素作为第一个参数来执行函数\n *\n * @link http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:forEach\n * @memberOf array\n * @function\n *\n * @param {Array} arr 要执行操作的数组\n * @param {Function} fun 要执行的函数\n * @param {Object} contextObj 执行函数时的上下文对象，可以省略\n *\n */\n_.forEach = Array.prototype.forEach ?\n\n  function() {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return Array.prototype.forEach.apply(arguments[0], args);\n  } :\n  function(arr, fun /*, thisp*/ ) {\n    var len = arr.length;\n    if (typeof fun != \"function\") {\n      throw new TypeError();\n    }\n    var thisp = arguments[2];\n    for (var i = 0; i < len; i++) {\n      if (i in arr) {\n        fun.call(thisp, arr[i], i, arr);\n      }\n    }\n  };\n\n/**\n * 用一个自定义函数来过滤数组\n *\n * @link http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:filter\n * @memberOf array\n * @function\n *\n * @param {Array} arr 要执行操作的数组\n * @param {Function} fun 过滤函数\n * @param {Object} contextObj 执行函数时的上下文对象，可以省略\n *\n * @return {Array}返回筛选出的新数组\n */\n_.filter = Array.prototype.filter ?\n\n  function() {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return Array.prototype.filter.apply(arguments[0], args);\n  } :\n  function(arr, fun) {\n    var len = arr.length;\n    if (typeof fun != \"function\") {\n      throw new TypeError();\n    }\n    var res = [];\n    var thisp = arguments[2];\n    for (var i = 0; i < len; i++) {\n      if (i in arr) {\n        var val = arr[i]; // in case fun mutates this\n        if (fun.call(thisp, val, i, arr)) {\n          res.push(val);\n        }\n      }\n    }\n    return res;\n  };\n\n\n\n/**\n * 遍历数组，把每个数组元素作为第一个参数来执行函数，如果有任意一个或多个数组成员使得函数执行结果返回 true，则最终返回 true，否则返回 false\n *\n * @link http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:some\n * @memberOf array\n * @function\n *\n * @param {Array} arr 要执行操作的数组\n * @param {Function} fun 要执行的函数\n * @param {Object} contextObj 执行函数时的上下文对象，可以省略\n *\n * @return {Boolean}\n */\n_.some = Array.prototype.some ?\n\n  function() {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return Array.prototype.some.apply(arguments[0], args);\n  } :\n  function(arr, fun /*, thisp*/ ) {\n    var len = arr.length;\n    if (typeof fun != \"function\") {\n      throw new TypeError();\n    }\n\n    var thisp = arguments[2];\n    for (var i = 0; i < len; i++) {\n      if (i in arr && fun.call(thisp, arr[i], i, arr)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n\n/**\n * 遍历数组，把每个数组元素作为第一个参数来执行函数，并把函数的返回结果以映射的方式存入到返回的数组中\n *\n * @link http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:map\n * @memberOf array\n * @function\n *\n * @param {Array} arr 要执行操作的数组\n * @param {Function} fun 要执行的函数\n * @param {Object} contextObj 执行函数时的上下文对象，可以省略\n *\n * @return {Array}返回映射后的新数组\n */\n_.map = Array.prototype.map ?\n\n  function() {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return Array.prototype.map.apply(arguments[0], args);\n  } :\n  function(arr, fun /*, thisp*/ ) {\n    var len = arr.length;\n    if (typeof fun != \"function\") {\n      throw new TypeError();\n    }\n    var res = new Array(len);\n    var thisp = arguments[2];\n    for (var i = 0; i < len; i++) {\n      if (i in arr) {\n        res[i] = fun.call(thisp, arr[i], i, arr);\n      }\n    }\n\n    return res;\n  };\n\n\n/**\n * 遍历数组，把每个数组元素作为第一个参数来执行函数，如果所有的数组成员都使得函数执行结果返回 true，则最终返回 true，否则返回 false\n *\n * @link http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Objects:Array:every\n * @memberOf array\n * @function\n *\n * @param {Array} arr 要执行操作的数组\n * @param {Function} fun 要执行的函数\n * @param {Object} contextObj 执行函数时的上下文对象，可以省略\n *\n * @return {Boolean}\n */\n_.every = Array.prototype.every ?\n\n  function() {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return Array.prototype.every.apply(arguments[0], args);\n  } :\n  function(arr, fun) {\n    var len = arr.length;\n    if (typeof fun != \"function\") {\n      throw new TypeError();\n    }\n    var thisp = arguments[2];\n    for (var i = 0; i < len; i++) {\n      if (i in arr && !fun.call(thisp, arr[i], i, arr)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n\n\n/**\n * 对该数组的每项和前一次调用的结果运行一个函数，收集最后的结果。\n *\n * @link http://developer.mozilla.org/en/docs/Core_JavaScript_1.8_Reference:Objects:Array:reduce\n * @memberOf array\n * @function\n *\n * @param {Array} arr 要执行操作的数组\n * @param {Function} fun 要执行的函数\n * @param {Object} contextObj 执行函数时的上下文对象，可以省略\n *\n * @return {Boolean}\n */\n_.reduce = Array.prototype.reduce ?\n\n  function() {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return Array.prototype.reduce.apply(arguments[0], args);\n  } :\n  function(arr, fun /*, initial*/ ) {\n    var len = arr.length >>> 0;\n    if (typeof fun != \"function\") {\n      throw new TypeError();\n    }\n    // no value to return if no initial value and an empty array\n    if (len == 0 && arguments.length == 2) {\n      throw new TypeError();\n    }\n    var i = 0;\n    if (arguments.length >= 3) {\n      var rv = arguments[2];\n    } else {\n      do {\n        if (i in arr) {\n          rv = arr[i++];\n          break;\n        }\n\n        // if array contains no values, no initial value to return\n        if (++i >= len) {\n          throw new TypeError();\n        }\n      }\n      while (true);\n    }\n\n    for (; i < len; i++) {\n      if (i in arr) {\n        rv = fun.call(null, rv, arr[i], i, arr);\n      }\n    }\n\n    return rv;\n  };\n\n\n\n/**\n * 同上，但从右向左执行。\n *\n * @link http://developer.mozilla.org/en/docs/Core_JavaScript_1.8_Reference:Objects:Array:reduceRight\n * @memberOf array\n * @function\n *\n * @param {Array} arr 要执行操作的数组\n * @param {Function} fun 要执行的函数\n * @param {Object} contextObj 执行函数时的上下文对象，可以省略\n *\n * @return {Boolean}\n */\n_.reduceRight = Array.prototype.reduceRight ?\n\n  function() {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return Array.prototype.reduceRight.apply(arguments[0], args);\n  } :\n  function(arr, fun /*, initial*/ ) {\n    var len = arr.length >>> 0;\n    if (typeof fun != \"function\") {\n      throw new TypeError();\n    }\n    // no value to return if no initial value, empty array\n    if (len == 0 && arguments.length == 2) {\n      throw new TypeError();\n    }\n    var i = len - 1;\n    if (arguments.length >= 3) {\n      var rv = arguments[2];\n    } else {\n      do {\n        if (i in arr) {\n          rv = arr[i--];\n          break;\n        }\n\n        // if array contains no values, no initial value to return\n        if (--i < 0) {\n          throw new TypeError();\n        }\n      }\n      while (true);\n    }\n\n    for (; i >= 0; i--) {\n      if (i in arr) {\n        rv = fun.call(null, rv, arr[i], i, arr);\n      }\n    }\n\n    return rv;\n  };\n\n\n\n/**\n * 将任意变量转换为数组的方法\n *\n * @memberOf array\n * @param {Mixed} o 任意变量\n * @return {Array} 返回转换后的数组\n */\n_.toArray = function(o) {\n  var type = _obj.$typeof(o);\n  return (type) ? ((type != 'array' && type != 'arguments') ? [o] : o) : [];\n};\n\n\n\n/**\n * 从数组中移除一个或多个数组成员\n *\n * @memberOf array\n * @param {Array} arr 要移除的数组成员，可以是单个成员也可以是成员的数组\n * @return {Boolean} 找到并移除, 返回 true\n */\n_.remove = function(arr, members) {\n  var members = _.toArray(members),\n    i,\n    j,\n    flag = false;\n  for (i = 0; i < members.length; i++) {\n    for (j = 0; j < arr.length; j++) {\n      if (arr[j] === members[i]) {\n        arr.splice(j, 1);\n        flag = true;\n      }\n    }\n  }\n  return flag;\n};\n\n/**\n * 替换一个数组成员\n *\n * @memberOf array\n * @param {Object} oldValue 当前数组成员\n * @param {Object} newValue 要替换成的值\n * @return {Boolean} 如果找到旧值并成功替换则返回 true，否则返回 false\n */\n_.replace = function(arr, oldValue, newValue) {\n  var i;\n  for (i = 0; i < arr.length; i++) {\n    if (arr[i] === oldValue) {\n      arr[i] = newValue;\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * 冒泡排序,默认从小到大排序\n * @memberOf array\n * @param {Array} arr 需要排序的数组\n * @param {Function} compareFunc 比较方法, 传入两个参数 a,b, 若返回 大于0 则表示 a > b, 小于 0 则 a < b\n *  可选, 默认返回 a - b的结果\n * @return {Array} 排序后的数组\n * @example\n *\n * bubbleSort([3,5,6,2], function(a, b){\n *  return a - b;\n * });\n *\n */\n_.bubbleSort = function(arr, compareFunc) {\n  compareFunc = compareFunc || function(num1, num2) {\n    return num1 - num2;\n  };\n  //数组长度\n  var n = arr.length;\n  //交换顺序的临时变量\n  var temp; //\n  //交换标志\n  var exchange;\n  //最多做n-1趟排序\n  for (var time = 0; time < n - 1; time++) {\n    exchange = false;\n    for (var i = n - 1; i > time; i--) {\n      if (compareFunc(arr[i], arr[i - 1]) < 0) {\n        //if (arr[i] < arr[i - 1]) {\n        exchange = true;\n        temp = arr[i - 1];\n        arr[i - 1] = arr[i];\n        arr[i] = temp;\n      }\n    }\n    //若本趟排序未发生交换，提前终止算法\n    if (!exchange) {\n      break;\n    }\n  }\n  return arr;\n};\n\n/**\n * 二叉搜索\n * @memberOf array\n * @param {Array} arr 源数组\n * @param {Object} item 查找的目标\n * @param {Function} compareFunc 比较方法, 传入两个参数 a,b, 若返回 大于0 则表示 a > b, 小于 0 则 a < b\n * @return {Number} item 所处的 index\n *\n */\n_.binarySearch = function(arr, item, compareFunc) {\n  var start = 0;\n  var end = arr.length;\n  var current = Math.floor(arr.length / 2);\n  while (end != current) {\n    if (compareFunc(item, arr[current]) > 0) {\n      start = current + 1;\n    } else {\n      end = current;\n    };\n\n    current = Math.floor((start + end) / 2);\n  };\n  return current;\n};\n\n/**\n * 判断arr是否包含元素o\n * @memberOf array\n * @name contains\n * @function\n * @param {Array} arr\n * @param {Obejct} o\n * @return {Boolean}\n */\n_.contains = function(arr, o) {\n  return (_.indexOf(arr, o) > -1);\n};\n\n/**\n * 唯一化一个数组\n * @memberOf array\n * @param {Array} arr\n * @return {Array} 由不重复元素构成的数组\n */\n_.uniquelize = function(arr) {\n  var result = [];\n  for (var i = 0, len = arr.length; i < len; i++) {\n    if (!_.contains(result, arr[i])) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * 求两个集合的交集\n * a ∩ b\n * @memberOf array\n * @param {Array} a\n * @param {Array} b\n * @return {Array} a ∩ b\n */\n_.intersect = function(a, b) {\n  var result = [];\n  for (var i = 0, len = a.length; i < len; i++) {\n    if (_.contains(b, a[i])) {\n      result.push(a[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * 求两个集合的差集\n * a - b\n * @memberOf array\n * @param {Array} a\n * @param {Array} b\n * @return {Array} a - b\n */\n_.minus = function(a, b) {\n  var result = [];\n  for (var i = 0, len = a.length; i < len; i++) {\n    if (!_.contains(b, a[i])) {\n      result.push(a[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * 求两个集合的并集\n * a U b\n * @memberOf array\n * @param {Array} a\n * @param {Array} b\n * @return {Array} a U b\n */\n_.union = function(a, b) {\n  return _.uniquelize(a.concat(b));\n};\n\n\nmodule.exports = {\n  array: _\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/utils/array.js\n ** module id = 4\n ** module chunks = 0\n **/","/**\n * format 扩展包\n */\nvar _ = {};\n\n/**\n * 让日期和时间按照指定的格式显示的方法\n * @method date\n * @memberOf format\n * @param {String} format 格式字符串\n * @return {String} 返回生成的日期时间字符串\n *\n * @example\n *     var d = new Date();\n *     // 以 YYYY-MM-dd hh:mm:ss 格式输出 d 的时间字符串\n *     format.date(d, \"YYYY-MM-DD hh:mm:ss\");\n *\n */\n_.date = function(date, formatString) {\n  /*\n   * eg:formatString=\"YYYY-MM-DD hh:mm:ss\";\n   */\n  var o = {\n    \"M+\": date.getMonth() + 1, //month\n    \"D+\": date.getDate(), //day\n    \"h+\": date.getHours(), //hour\n    \"m+\": date.getMinutes(), //minute\n    \"s+\": date.getSeconds(), //second\n    \"q+\": Math.floor((date.getMonth() + 3) / 3), //quarter\n    \"S\": date.getMilliseconds() //millisecond\n  }\n\n  if (/(Y+)/.test(formatString)) {\n    formatString = formatString.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n  }\n\n  for (var k in o) {\n    if (new RegExp(\"(\" + k + \")\").test(formatString)) {\n      formatString = formatString.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : (\"00\" + o[k]).substr((\"\" + o[k]).length));\n    }\n  }\n  return formatString;\n};\n\n/**\n * @memberOf format\n * @method number\n * 格式化数字显示方式\n * @param num 要格式化的数字\n * @param pattern 格式\n * @example\n * format.number(12345.999,'#,##0.00');\n *  //out: 12,34,5.99\n * format.number(12345.999,'0');\n *  //out: 12345\n * format.number(1234.888,'#.0');\n *  //out: 1234.8\n * format.number(1234.888,'000000.000000');\n *  //out: 001234.888000\n */\n_.number = function(num, pattern) {\n  var strarr = num ? num.toString().split('.') : ['0'];\n  var fmtarr = pattern ? pattern.split('.') : [''];\n  var retstr = '';\n\n  // 整数部分\n  var str = strarr[0];\n  var fmt = fmtarr[0];\n  var i = str.length - 1;\n  var comma = false;\n  for (var f = fmt.length - 1; f >= 0; f--) {\n    switch (fmt.substr(f, 1)) {\n      case '':\n        if (i >= 0)\n          retstr = str.substr(i--, 1) + retstr;\n        break;\n      case '0':\n        if (i >= 0)\n          retstr = str.substr(i--, 1) + retstr;\n        else\n          retstr = '0' + retstr;\n        break;\n      case ',':\n        comma = true;\n        retstr = ',' + retstr;\n        break;\n    }\n  }\n  if (i >= 0) {\n    if (comma) {\n      var l = str.length;\n      for (; i >= 0; i--) {\n        retstr = str.substr(i, 1) + retstr;\n        if (i > 0 && ((l - i) % 3) == 0)\n          retstr = ',' + retstr;\n      }\n    } else\n      retstr = str.substr(0, i + 1) + retstr;\n  }\n\n  retstr = retstr + '.';\n  // 处理小数部分\n  str = strarr.length > 1 ? strarr[1] : '';\n  fmt = fmtarr.length > 1 ? fmtarr[1] : '';\n  i = 0;\n  for (var f = 0; f < fmt.length; f++) {\n    switch (fmt.substr(f, 1)) {\n      case '':\n        if (i < str.length)\n          retstr += str.substr(i++, 1);\n        break;\n      case '0':\n        if (i < str.length)\n          retstr += str.substr(i++, 1);\n        else\n          retstr += '0';\n        break;\n    }\n  }\n  return retstr.replace(/^,+/, '').replace(/\\.$/, '');\n};\n\nmodule.exports = {\n  /**\n   * number 名字空间\n   *\n   * @namespace\n   * @name format\n   * @type Object\n   */\n  format: _\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/utils/format.js\n ** module id = 5\n ** module chunks = 0\n **/","var _ = {};\n\n/**\n * cookie类\n *\n */\nvar domainPrefix = window.location.host;\n\n/**\n * cookie 名字空间\n * @namespace\n * @name cookie\n */\nvar cookie =\n/**\n * @lends cookie\n */\n{\n\n    /**\n     * 设置一个cookie\n     *\n     * @param {String} name cookie名称\n     * @param {String} value cookie值\n     * @param {String} domain 所在域名\n     * @param {String} path 所在路径\n     * @param {Number} hour 存活时间，单位:小时\n     * @return {Boolean} 是否成功\n     */\n    set : function(name, value, domain, path, hour) {\n        if (hour) {\n            var today = new Date();\n            var expire = new Date();\n            expire.setTime(today.getTime() + 3600000 * hour);\n        }\n        window.document.cookie = name + \"=\" + value + \"; \" + (hour ? (\"expires=\" + expire.toGMTString() + \"; \") : \"\") + (path ? (\"path=\" + path + \"; \") : \"path=/; \") + (domain ? (\"domain=\" + domain + \";\") : (\"domain=\" + domainPrefix + \";\"));\n        return true;\n    },\n\n    /**\n     * 获取指定名称的cookie值\n     *\n     * @param {String} name cookie名称\n     * @return {String} 获取到的cookie值\n     */\n    get : function(name) {\n        var r = new RegExp(\"(?:^|;+|\\\\s+)\" + name + \"=([^;]*)\");\n        // var r = new RegExp(\"(?:^|;+|\\\\s+)\" + name + \"=([^;]*?)(?:;|$)\");\n        var m = window.document.cookie.match(r);\n        return (!m ? \"\" : m[1]);\n        // document.cookie.match(new\n        // RegExp(\"(?:^|;+|\\\\s+)speedMode=([^;]*?)(?:;|$)\"))\n    },\n\n    /**\n     * 删除指定cookie,复写为过期\n     *\n     * @param {String} name cookie名称\n     * @param {String} domain 所在域\n     * @param {String} path 所在路径\n     */\n    remove : function(name, domain, path) {\n        window.document.cookie = name + \"=; expires=Mon, 26 Jul 1997 05:00:00 GMT; \" + (path ? (\"path=\" + path + \"; \") : \"path=/; \") + (domain ? (\"domain=\" + domain + \";\") : (\"domain=\" + domainPrefix + \";\"));\n    }\n};\n\n\n/**\n * localStorage 名字空间\n * @namespace\n * @name localStorage\n */\nvar localStorage =\n/**\n * @lends localStorage\n */\n{\n\n    /**\n     * 设置一个localStorage\n     * @param {String} name\n     * @param {String} value\n     */\n    setItem : function(name, value) {\n        if(this.isSupports()){\n            window.localStorage.setItem(name,value);\n        }\n    },\n    /**\n     * 根据名字读取值\n     * @param {String} name\n     * @return {String}\n     */\n    getItem : function(name) {\n        if(this.isSupports()){\n            return window.localStorage.getItem(name);\n        }\n        return null;\n    },\n    /**\n     * 根据名字移除值\n     * @param {String} name\n     */\n    removeItem : function(name) {\n        if(this.isSupports()){\n            window.localStorage.removeItem(name);\n        }\n    },\n    /**\n     * 清空 localStorage\n     */\n    clear : function(){\n        if(this.isSupports()){\n            window.localStorage.clear();\n        }\n    },\n    /**\n     * 判断是否支持 localStorage\n     */\n    isSupports : function(){\n        return ('localStorage' in window) && window['localStorage']!== null;\n    }\n};\n\nmodule.exports = {\n  cookie: cookie,\n  localStorage: localStorage\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/utils/storage.js\n ** module id = 6\n ** module chunks = 0\n **/","var _ = {};\n\n/**\n * 将任意变量转换为字符串\n *\n * @method toString\n * @memberOf string\n *\n * @param {Mixed} o 变量\n * @return {String} 返回转换后的字符串\n */\n_.toString = function(obj) {\n  return (obj + \"\");\n};\n\n/**\n * 判断是否是一个可接受的 url 串\n *\n * @method isURL\n * @memberOf string\n *\n * @param {String} str 要检测的字符串\n * @return {Boolean} 如果是可接受的 url 则返回 true\n */\n_.isURL = function(str) {\n  return _.isURL.RE.test(str);\n};\n\n/**\n * 判断是否为一个有效的URL\n * @type {RegExp}\n */\n_.isURL.RE = /^(?:ht|f)tp(?:s)?\\:\\/\\/(?:[\\w\\-\\.]+)\\.\\w+/i;\n\n/**\n * 分解 URL 为一个对象，成员为：scheme, user, pass, host, port, path, query, fragment\n *\n * @method parseURL\n * @memberOf string\n *\n * @param {String} str URL 地址\n * @return {Object} 如果解析失败则返回 null\n */\n_.parseURL = function(str) {\n  var ret = null;\n\n  if (null !== (ret = _.parseURL.RE.exec(str))) {\n    var spec = {};\n    for (var i = 0, j = _.parseURL.SPEC.length; i < j; i++) {\n      var curSpec = _.parseURL.SPEC[i];\n      spec[curSpec] = ret[i + 1];\n    }\n    ret = spec;\n    spec = null;\n  }\n\n  return ret;\n};\n\n/**\n * @ignore\n */\n_.parseURL.SPEC = ['scheme', 'user', 'pass', 'host', 'port', 'path', 'query', 'fragment'];\n_.parseURL.RE = /^([^:]+):\\/\\/(?:([^:@]+):?([^@]*)@)?(?:([^/?#:]+):?(\\d*))([^?#]*)(?:\\?([^#]+))?(?:#(.+))?$/;\n\n/**\n * 将 url 的查询字符串参数映射成对象\n *\n * @method mapQuery\n * @memberOf string\n *\n * @param {String} uri 要映射的 uri\n * @return {Object} 按照 uri 映射成的对象\n *\n * @example\n *  var url = \"http://domain.com/?p1=1&p2=2\";\n *  mapQuery(url); // { p1:1, p2:2 }\n * };\n */\n_.mapQuery = function(uri) {\n  //window.location.search\n  var i,\n    key,\n    value,\n    uri = uri && uri.split('#')[0] || window.location.search, //remove hash\n    index = uri.indexOf(\"?\"),\n    pieces = uri.substring(index + 1).split(\"&\"),\n    params = {};\n  //如果连?号都没有,直接返回,不进行处理.\n  if (index === -1) {\n    return params;\n  }\n  for (i = 0; i < pieces.length; i++) {\n    try {\n      index = pieces[i].indexOf(\"=\");\n      key = pieces[i].substring(0, index);\n      value = pieces[i].substring(index + 1);\n      if (!(params[key] = unescape(value))) {\n        throw new Error(\"uri has wrong query string when run mapQuery.\");\n      }\n    } catch (e) {\n      throw new Error(\"错误：has wrong when run mapQuery.\");\n    }\n  }\n  return params;\n};\n\n\n/**\n * 判断是否含有指定的字符串\n *\n * @memberOf string\n * @name contains\n * @function\n * @param {String} string 是否含有的字符串\n * @param {String} separator 分隔符，可选(有分隔符则判断两个字符串是否一致)\n * @return {Boolean} 如果含有，返回 true，否则返回 false\n */\n_.contains = function(string1, string2, separator){\n    return (separator) ? (separator + string1 + separator).indexOf(separator + string2 + separator) > -1 : string1.indexOf(string2) > -1;\n};\n/**\n * 清除字符串开头和结尾的空格\n *\n * @memberOf string\n *\n * @return {String} 返回清除后的字符串\n */\n_.trim = function(string){\n    return String(string).replace(/^\\s+|\\s+$/g, '');\n};\n\n/**\n * 清除字符串开头和结尾的空格，并把字符串之间的多个空格转换为一个空格\n *\n * @memberOf string\n *\n * @return {String} 返回清除后的字符串\n */\n_.clean = function(string){\n    return _.trim(string.replace(/\\s+/g, ' '));\n};\n\n/**\n * 将“-”连接的字符串转换成驼峰式写法\n *\n * @memberOf string\n *\n * @return {String} 返回转换后的字符串\n */\n_.camelCase = function(string){\n    return _.toString(string).replace(/-\\D/g, function(match){\n        return match.charAt(1).toUpperCase();\n    });\n};\n\n/**\n * 将驼峰式写法字符串转换成“-”连接的\n *\n * @memberOf string\n *\n * @return {String} 返回转换后的字符串\n */\n_.hyphenate = function(string){\n    return _.toString(string).replace(/[A-Z]/g, function(match){\n        return ('-' + match.charAt(0).toLowerCase());\n    });\n};\n\n/**\n * 将字符串转换成首字母大写\n *\n * @memberOf string\n *\n * @return {String} 返回转换后的字符串\n */\n_.capitalize = function(string){\n    return _.toString(string).replace(/\\b[a-z]/g, function(match){\n        return match.toUpperCase();\n    });\n};\n\n/**\n * 将字符串转换成整数\n *\n * @memberOf string\n *\n * @return {Number} 返回转换后的整数\n */\n_.toInt = function(string, base){\n    return parseInt(string, base || 10);\n};\n\n/**\n * 将字符串转换成浮点数\n *\n * @memberOf string\n * @param {Sring} string 要转换的字符串\n * @return {Number} 返回转换后的浮点数\n */\n_.toFloat = function(string){\n    return parseFloat(string);\n};\n\n/**\n * 将颜色 Hex 写法转换成 RGB 写法\n *\n * @memberOf string\n * @return {String} 返回转换后的字符串\n * @author rewrite by dmyang\n */\n_.hexToRgb = function(string){\n    var hex = string.match(/^#?(\\w{1,2})(\\w{1,2})(\\w{1,2})$/);\n    var _convert = function(array) {\n        var length = array.length;\n        if (length !== 3) return null;\n        for(var i=0, value; i<length; i++) {\n            value = array[i];\n            if(value.length === 1) value += value;\n            array[i] = parseInt(value, 16);\n        }\n        return 'rgb(' + array + ')';\n    };\n    return (hex) ? _convert(hex.slice(1)) : null;\n};\n\n/**\n * 将颜色 RGB 写法转换成 Hex 写法\n *\n * @memberOf string\n * @return {String} 返回转换后的字符串\n * @author rewrite by dmyang\n */\n_.rgbToHex = function(string){\n    var r = string.match(/\\d{1,3}/g);\n    return (r) ? '#' + ((1 << 24) + ((r[0] << 0) << 16) + ((r[1] << 0) << 8) + (r[2] << 0)).toString(16).slice(1) : null;\n};\n\n/**\n * 编码查询参数\n *\n * @memberOf string\n * @param {string} key 要编码的查询参数名字\n * @param {string} value 要编码的查询参数值\n * @return {String} 返回编码后的查询字符串\n */\n_.toQueryPair = function(key, value) {\n    return encodeURIComponent(String(key)) + \"=\" + encodeURIComponent(String(value));\n}\n\n/**\n * 将对象转换为查询参数字符串\n *\n * @memberOf string\n * @param {Object} obj 要转换成查询字符串的对象\n * @return {String} 返回转换后的查询参数字符串\n */\n_.toQueryString = function(obj){\n    var result=[];\n    for(var key in obj){\n        result.push(_.toQueryPair(key, obj[key]));\n    }\n    return result.join(\"&\");\n}\n\n/**\n * 全局替换指定的字符串\n *\n * @memberOf string\n * @param {Object} string 需要替换字符串的字符串\n * @param {Object} reallyDo 需要替换什么字符串\n * @param {Object} replaceWith 替换为\n * @param {Object} ignoreCase 是否忽略大小写\n * @return {String} 返回替换后的字符串\n */\n_.replaceAll = function(string, reallyDo, replaceWith, ignoreCase) {\n    if (!RegExp.prototype.isPrototypeOf(reallyDo)) {\n        return string.replace(new RegExp(reallyDo, (ignoreCase ? \"gi\": \"g\")), replaceWith);\n    } else {\n        return string.replace(reallyDo, replaceWith);\n    }\n};\n\n/**\n * 判断给定字符串是否是数字\n * @memberOf string\n * @name isNumber\n * @function\n *\n * @param {String} string\n * @param {Number} n\n * @return {String}\n */\n_.isNumber = function(string){\n    return _.toString(string).search(/^\\d+$/) !== -1;\n};\n\n/**\n * 判断给定字符串是否是邮箱格式\n * @memberOf string\n * @param {String} emailStr\n * @return {Boolean}\n */\n_.isEmail = function(string){\n  return string.search(/^\\w+((-\\w+)|(\\.\\w+))*\\@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/) !== -1;\n};\n\nmodule.exports = {\n  string: _\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/utils/string.js\n ** module id = 7\n ** module chunks = 0\n **/","var map = {\n\t\"./core\": 1,\n\t\"./core.js\": 1,\n\t\"./index\": 2,\n\t\"./index.js\": 2,\n\t\"./utils/array\": 4,\n\t\"./utils/array.js\": 4,\n\t\"./utils/format\": 5,\n\t\"./utils/format.js\": 5,\n\t\"./utils/object\": 3,\n\t\"./utils/object.js\": 3,\n\t\"./utils/storage\": 6,\n\t\"./utils/storage.js\": 6,\n\t\"./utils/string\": 7,\n\t\"./utils/string.js\": 7\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 8;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src ^\\.\\/.*$\n ** module id = 8\n ** module chunks = 0\n **/"],"sourceRoot":""}